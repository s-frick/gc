/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class SuspensionExerciseName  {
    public static final int CHEST_FLY = 0;
    public static final int CHEST_PRESS = 1;
    public static final int CRUNCH = 2;
    public static final int CURL = 3;
    public static final int DIP = 4;
    public static final int FACE_PULL = 5;
    public static final int GLUTE_BRIDGE = 6;
    public static final int HAMSTRING_CURL = 7;
    public static final int HIP_DROP = 8;
    public static final int INVERTED_ROW = 9;
    public static final int KNEE_DRIVE_JUMP = 10;
    public static final int KNEE_TO_CHEST = 11;
    public static final int LAT_PULLOVER = 12;
    public static final int LUNGE = 13;
    public static final int MOUNTAIN_CLIMBER = 14;
    public static final int PENDULUM = 15;
    public static final int PIKE = 16;
    public static final int PLANK = 17;
    public static final int POWER_PULL = 18;
    public static final int PULL_UP = 19;
    public static final int PUSH_UP = 20;
    public static final int REVERSE_MOUNTAIN_CLIMBER = 21;
    public static final int REVERSE_PLANK = 22;
    public static final int ROLLOUT = 23;
    public static final int ROW = 24;
    public static final int SIDE_LUNGE = 25;
    public static final int SIDE_PLANK = 26;
    public static final int SINGLE_LEG_DEADLIFT = 27;
    public static final int SINGLE_LEG_SQUAT = 28;
    public static final int SIT_UP = 29;
    public static final int SPLIT = 30;
    public static final int SQUAT = 31;
    public static final int SQUAT_JUMP = 32;
    public static final int TRICEP_PRESS = 33;
    public static final int Y_FLY = 34;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(CHEST_FLY, "CHEST_FLY");
        stringMap.put(CHEST_PRESS, "CHEST_PRESS");
        stringMap.put(CRUNCH, "CRUNCH");
        stringMap.put(CURL, "CURL");
        stringMap.put(DIP, "DIP");
        stringMap.put(FACE_PULL, "FACE_PULL");
        stringMap.put(GLUTE_BRIDGE, "GLUTE_BRIDGE");
        stringMap.put(HAMSTRING_CURL, "HAMSTRING_CURL");
        stringMap.put(HIP_DROP, "HIP_DROP");
        stringMap.put(INVERTED_ROW, "INVERTED_ROW");
        stringMap.put(KNEE_DRIVE_JUMP, "KNEE_DRIVE_JUMP");
        stringMap.put(KNEE_TO_CHEST, "KNEE_TO_CHEST");
        stringMap.put(LAT_PULLOVER, "LAT_PULLOVER");
        stringMap.put(LUNGE, "LUNGE");
        stringMap.put(MOUNTAIN_CLIMBER, "MOUNTAIN_CLIMBER");
        stringMap.put(PENDULUM, "PENDULUM");
        stringMap.put(PIKE, "PIKE");
        stringMap.put(PLANK, "PLANK");
        stringMap.put(POWER_PULL, "POWER_PULL");
        stringMap.put(PULL_UP, "PULL_UP");
        stringMap.put(PUSH_UP, "PUSH_UP");
        stringMap.put(REVERSE_MOUNTAIN_CLIMBER, "REVERSE_MOUNTAIN_CLIMBER");
        stringMap.put(REVERSE_PLANK, "REVERSE_PLANK");
        stringMap.put(ROLLOUT, "ROLLOUT");
        stringMap.put(ROW, "ROW");
        stringMap.put(SIDE_LUNGE, "SIDE_LUNGE");
        stringMap.put(SIDE_PLANK, "SIDE_PLANK");
        stringMap.put(SINGLE_LEG_DEADLIFT, "SINGLE_LEG_DEADLIFT");
        stringMap.put(SINGLE_LEG_SQUAT, "SINGLE_LEG_SQUAT");
        stringMap.put(SIT_UP, "SIT_UP");
        stringMap.put(SPLIT, "SPLIT");
        stringMap.put(SQUAT, "SQUAT");
        stringMap.put(SQUAT_JUMP, "SQUAT_JUMP");
        stringMap.put(TRICEP_PRESS, "TRICEP_PRESS");
        stringMap.put(Y_FLY, "Y_FLY");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}

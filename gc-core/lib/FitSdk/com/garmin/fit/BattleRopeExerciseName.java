/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class BattleRopeExerciseName  {
    public static final int ALTERNATING_FIGURE_EIGHT = 0;
    public static final int ALTERNATING_JUMP_WAVE = 1;
    public static final int ALTERNATING_KNEELING_TO_STANDING_WAVE = 2;
    public static final int ALTERNATING_LUNGE_WAVE = 3;
    public static final int ALTERNATING_SQUAT_WAVE = 4;
    public static final int ALTERNATING_WAVE = 5;
    public static final int ALTERNATING_WAVE_WITH_LATERAL_SHUFFLE = 6;
    public static final int CLAP_WAVE = 7;
    public static final int DOUBLE_ARM_FIGURE_EIGHT = 8;
    public static final int DOUBLE_ARM_SIDE_TO_SIDE_SNAKE = 9;
    public static final int DOUBLE_ARM_SIDE_WAVE = 10;
    public static final int DOUBLE_ARM_SLAM = 11;
    public static final int DOUBLE_ARM_WAVE = 12;
    public static final int GRAPPLER_TOSS = 13;
    public static final int HIP_TOSS = 14;
    public static final int IN_AND_OUT_WAVE = 15;
    public static final int INSIDE_CIRCLE = 16;
    public static final int JUMPING_JACKS = 17;
    public static final int OUTSIDE_CIRCLE = 18;
    public static final int RAINBOW = 19;
    public static final int SIDE_PLANK_WAVE = 20;
    public static final int SIDEWINDER = 21;
    public static final int SITTING_RUSSIAN_TWIST = 22;
    public static final int SNAKE_WAVE = 23;
    public static final int SPLIT_JACK = 24;
    public static final int STAGE_COACH = 25;
    public static final int ULTIMATE_WARRIOR = 26;
    public static final int UPPER_CUTS = 27;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(ALTERNATING_FIGURE_EIGHT, "ALTERNATING_FIGURE_EIGHT");
        stringMap.put(ALTERNATING_JUMP_WAVE, "ALTERNATING_JUMP_WAVE");
        stringMap.put(ALTERNATING_KNEELING_TO_STANDING_WAVE, "ALTERNATING_KNEELING_TO_STANDING_WAVE");
        stringMap.put(ALTERNATING_LUNGE_WAVE, "ALTERNATING_LUNGE_WAVE");
        stringMap.put(ALTERNATING_SQUAT_WAVE, "ALTERNATING_SQUAT_WAVE");
        stringMap.put(ALTERNATING_WAVE, "ALTERNATING_WAVE");
        stringMap.put(ALTERNATING_WAVE_WITH_LATERAL_SHUFFLE, "ALTERNATING_WAVE_WITH_LATERAL_SHUFFLE");
        stringMap.put(CLAP_WAVE, "CLAP_WAVE");
        stringMap.put(DOUBLE_ARM_FIGURE_EIGHT, "DOUBLE_ARM_FIGURE_EIGHT");
        stringMap.put(DOUBLE_ARM_SIDE_TO_SIDE_SNAKE, "DOUBLE_ARM_SIDE_TO_SIDE_SNAKE");
        stringMap.put(DOUBLE_ARM_SIDE_WAVE, "DOUBLE_ARM_SIDE_WAVE");
        stringMap.put(DOUBLE_ARM_SLAM, "DOUBLE_ARM_SLAM");
        stringMap.put(DOUBLE_ARM_WAVE, "DOUBLE_ARM_WAVE");
        stringMap.put(GRAPPLER_TOSS, "GRAPPLER_TOSS");
        stringMap.put(HIP_TOSS, "HIP_TOSS");
        stringMap.put(IN_AND_OUT_WAVE, "IN_AND_OUT_WAVE");
        stringMap.put(INSIDE_CIRCLE, "INSIDE_CIRCLE");
        stringMap.put(JUMPING_JACKS, "JUMPING_JACKS");
        stringMap.put(OUTSIDE_CIRCLE, "OUTSIDE_CIRCLE");
        stringMap.put(RAINBOW, "RAINBOW");
        stringMap.put(SIDE_PLANK_WAVE, "SIDE_PLANK_WAVE");
        stringMap.put(SIDEWINDER, "SIDEWINDER");
        stringMap.put(SITTING_RUSSIAN_TWIST, "SITTING_RUSSIAN_TWIST");
        stringMap.put(SNAKE_WAVE, "SNAKE_WAVE");
        stringMap.put(SPLIT_JACK, "SPLIT_JACK");
        stringMap.put(STAGE_COACH, "STAGE_COACH");
        stringMap.put(ULTIMATE_WARRIOR, "ULTIMATE_WARRIOR");
        stringMap.put(UPPER_CUTS, "UPPER_CUTS");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class RowExerciseName  {
    public static final int BARBELL_STRAIGHT_LEG_DEADLIFT_TO_ROW = 0;
    public static final int CABLE_ROW_STANDING = 1;
    public static final int DUMBBELL_ROW = 2;
    public static final int ELEVATED_FEET_INVERTED_ROW = 3;
    public static final int WEIGHTED_ELEVATED_FEET_INVERTED_ROW = 4;
    public static final int FACE_PULL = 5;
    public static final int FACE_PULL_WITH_EXTERNAL_ROTATION = 6;
    public static final int INVERTED_ROW_WITH_FEET_ON_SWISS_BALL = 7;
    public static final int WEIGHTED_INVERTED_ROW_WITH_FEET_ON_SWISS_BALL = 8;
    public static final int KETTLEBELL_ROW = 9;
    public static final int MODIFIED_INVERTED_ROW = 10;
    public static final int WEIGHTED_MODIFIED_INVERTED_ROW = 11;
    public static final int NEUTRAL_GRIP_ALTERNATING_DUMBBELL_ROW = 12;
    public static final int ONE_ARM_BENT_OVER_ROW = 13;
    public static final int ONE_LEGGED_DUMBBELL_ROW = 14;
    public static final int RENEGADE_ROW = 15;
    public static final int REVERSE_GRIP_BARBELL_ROW = 16;
    public static final int ROPE_HANDLE_CABLE_ROW = 17;
    public static final int SEATED_CABLE_ROW = 18;
    public static final int SEATED_DUMBBELL_ROW = 19;
    public static final int SINGLE_ARM_CABLE_ROW = 20;
    public static final int SINGLE_ARM_CABLE_ROW_AND_ROTATION = 21;
    public static final int SINGLE_ARM_INVERTED_ROW = 22;
    public static final int WEIGHTED_SINGLE_ARM_INVERTED_ROW = 23;
    public static final int SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW = 24;
    public static final int SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW_AND_ROTATION = 25;
    public static final int SUSPENDED_INVERTED_ROW = 26;
    public static final int WEIGHTED_SUSPENDED_INVERTED_ROW = 27;
    public static final int T_BAR_ROW = 28;
    public static final int TOWEL_GRIP_INVERTED_ROW = 29;
    public static final int WEIGHTED_TOWEL_GRIP_INVERTED_ROW = 30;
    public static final int UNDERHAND_GRIP_CABLE_ROW = 31;
    public static final int V_GRIP_CABLE_ROW = 32;
    public static final int WIDE_GRIP_SEATED_CABLE_ROW = 33;
    public static final int ALTERNATING_DUMBBELL_ROW = 34;
    public static final int INVERTED_ROW = 35;
    public static final int ROW = 36;
    public static final int WEIGHTED_ROW = 37;
    public static final int INDOOR_ROW = 38;
    public static final int BANDED_FACE_PULLS = 39;
    public static final int CHEST_SUPPORTED_DUMBBELL_ROW = 40;
    public static final int DECLINE_RING_ROW = 41;
    public static final int ELEVATED_RING_ROW = 42;
    public static final int RDL_BENT_OVER_ROW_WITH_BARBELL_DUMBBELL = 43;
    public static final int RING_ROW = 44;
    public static final int BARBELL_ROW = 45;
    public static final int BENT_OVER_ROW_WITH_BARBELL = 46;
    public static final int BENT_OVER_ROW_WITH_DUMBELL = 47;
    public static final int SEATED_UNDERHAND_GRIP_CABLE_ROW = 48;
    public static final int TRX_INVERTED_ROW = 49;
    public static final int WEIGHTED_INVERTED_ROW = 50;
    public static final int WEIGHTED_TRX_INVERTED_ROW = 51;
    public static final int DUMBBELL_ROW_WHEELCHAIR = 52;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(BARBELL_STRAIGHT_LEG_DEADLIFT_TO_ROW, "BARBELL_STRAIGHT_LEG_DEADLIFT_TO_ROW");
        stringMap.put(CABLE_ROW_STANDING, "CABLE_ROW_STANDING");
        stringMap.put(DUMBBELL_ROW, "DUMBBELL_ROW");
        stringMap.put(ELEVATED_FEET_INVERTED_ROW, "ELEVATED_FEET_INVERTED_ROW");
        stringMap.put(WEIGHTED_ELEVATED_FEET_INVERTED_ROW, "WEIGHTED_ELEVATED_FEET_INVERTED_ROW");
        stringMap.put(FACE_PULL, "FACE_PULL");
        stringMap.put(FACE_PULL_WITH_EXTERNAL_ROTATION, "FACE_PULL_WITH_EXTERNAL_ROTATION");
        stringMap.put(INVERTED_ROW_WITH_FEET_ON_SWISS_BALL, "INVERTED_ROW_WITH_FEET_ON_SWISS_BALL");
        stringMap.put(WEIGHTED_INVERTED_ROW_WITH_FEET_ON_SWISS_BALL, "WEIGHTED_INVERTED_ROW_WITH_FEET_ON_SWISS_BALL");
        stringMap.put(KETTLEBELL_ROW, "KETTLEBELL_ROW");
        stringMap.put(MODIFIED_INVERTED_ROW, "MODIFIED_INVERTED_ROW");
        stringMap.put(WEIGHTED_MODIFIED_INVERTED_ROW, "WEIGHTED_MODIFIED_INVERTED_ROW");
        stringMap.put(NEUTRAL_GRIP_ALTERNATING_DUMBBELL_ROW, "NEUTRAL_GRIP_ALTERNATING_DUMBBELL_ROW");
        stringMap.put(ONE_ARM_BENT_OVER_ROW, "ONE_ARM_BENT_OVER_ROW");
        stringMap.put(ONE_LEGGED_DUMBBELL_ROW, "ONE_LEGGED_DUMBBELL_ROW");
        stringMap.put(RENEGADE_ROW, "RENEGADE_ROW");
        stringMap.put(REVERSE_GRIP_BARBELL_ROW, "REVERSE_GRIP_BARBELL_ROW");
        stringMap.put(ROPE_HANDLE_CABLE_ROW, "ROPE_HANDLE_CABLE_ROW");
        stringMap.put(SEATED_CABLE_ROW, "SEATED_CABLE_ROW");
        stringMap.put(SEATED_DUMBBELL_ROW, "SEATED_DUMBBELL_ROW");
        stringMap.put(SINGLE_ARM_CABLE_ROW, "SINGLE_ARM_CABLE_ROW");
        stringMap.put(SINGLE_ARM_CABLE_ROW_AND_ROTATION, "SINGLE_ARM_CABLE_ROW_AND_ROTATION");
        stringMap.put(SINGLE_ARM_INVERTED_ROW, "SINGLE_ARM_INVERTED_ROW");
        stringMap.put(WEIGHTED_SINGLE_ARM_INVERTED_ROW, "WEIGHTED_SINGLE_ARM_INVERTED_ROW");
        stringMap.put(SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW, "SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW");
        stringMap.put(SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW_AND_ROTATION, "SINGLE_ARM_NEUTRAL_GRIP_DUMBBELL_ROW_AND_ROTATION");
        stringMap.put(SUSPENDED_INVERTED_ROW, "SUSPENDED_INVERTED_ROW");
        stringMap.put(WEIGHTED_SUSPENDED_INVERTED_ROW, "WEIGHTED_SUSPENDED_INVERTED_ROW");
        stringMap.put(T_BAR_ROW, "T_BAR_ROW");
        stringMap.put(TOWEL_GRIP_INVERTED_ROW, "TOWEL_GRIP_INVERTED_ROW");
        stringMap.put(WEIGHTED_TOWEL_GRIP_INVERTED_ROW, "WEIGHTED_TOWEL_GRIP_INVERTED_ROW");
        stringMap.put(UNDERHAND_GRIP_CABLE_ROW, "UNDERHAND_GRIP_CABLE_ROW");
        stringMap.put(V_GRIP_CABLE_ROW, "V_GRIP_CABLE_ROW");
        stringMap.put(WIDE_GRIP_SEATED_CABLE_ROW, "WIDE_GRIP_SEATED_CABLE_ROW");
        stringMap.put(ALTERNATING_DUMBBELL_ROW, "ALTERNATING_DUMBBELL_ROW");
        stringMap.put(INVERTED_ROW, "INVERTED_ROW");
        stringMap.put(ROW, "ROW");
        stringMap.put(WEIGHTED_ROW, "WEIGHTED_ROW");
        stringMap.put(INDOOR_ROW, "INDOOR_ROW");
        stringMap.put(BANDED_FACE_PULLS, "BANDED_FACE_PULLS");
        stringMap.put(CHEST_SUPPORTED_DUMBBELL_ROW, "CHEST_SUPPORTED_DUMBBELL_ROW");
        stringMap.put(DECLINE_RING_ROW, "DECLINE_RING_ROW");
        stringMap.put(ELEVATED_RING_ROW, "ELEVATED_RING_ROW");
        stringMap.put(RDL_BENT_OVER_ROW_WITH_BARBELL_DUMBBELL, "RDL_BENT_OVER_ROW_WITH_BARBELL_DUMBBELL");
        stringMap.put(RING_ROW, "RING_ROW");
        stringMap.put(BARBELL_ROW, "BARBELL_ROW");
        stringMap.put(BENT_OVER_ROW_WITH_BARBELL, "BENT_OVER_ROW_WITH_BARBELL");
        stringMap.put(BENT_OVER_ROW_WITH_DUMBELL, "BENT_OVER_ROW_WITH_DUMBELL");
        stringMap.put(SEATED_UNDERHAND_GRIP_CABLE_ROW, "SEATED_UNDERHAND_GRIP_CABLE_ROW");
        stringMap.put(TRX_INVERTED_ROW, "TRX_INVERTED_ROW");
        stringMap.put(WEIGHTED_INVERTED_ROW, "WEIGHTED_INVERTED_ROW");
        stringMap.put(WEIGHTED_TRX_INVERTED_ROW, "WEIGHTED_TRX_INVERTED_ROW");
        stringMap.put(DUMBBELL_ROW_WHEELCHAIR, "DUMBBELL_ROW_WHEELCHAIR");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.ArrayList;

class Accumulator {
    // Index by Mesg# and DestField#
    ArrayList<AccumulatedField> accumulatedFields;

    Accumulator() {
        accumulatedFields = new ArrayList<AccumulatedField>();
    }

    public void set(int mesgNum, int destFieldNum, long value) {
        AccumulatedField accumField = null;
        int i;

        for (i = 0; i < accumulatedFields.size(); i++) {
            accumField = accumulatedFields.get(i);

            if ((accumField.mesgNum == mesgNum) && (accumField.destFieldNum == destFieldNum)) {
                break;
            }
        }

        if (i == accumulatedFields.size()) {
            accumField = new AccumulatedField(mesgNum, destFieldNum);
            accumulatedFields.add(accumField);
        }

        accumField.set(value);
    }

    public long accumulate(int mesgNum, int destFieldNum, long value, int bits) {
        AccumulatedField accumField = null;
        int i;

        for (i = 0; i < accumulatedFields.size(); i++) {
            accumField = accumulatedFields.get(i);

            if ((accumField.mesgNum == mesgNum) && (accumField.destFieldNum == destFieldNum)) {
                break;
            }
        }

        if (i == accumulatedFields.size()) {
            accumField = new AccumulatedField(mesgNum, destFieldNum);
            accumulatedFields.add(accumField);
        }

        return accumField.accumulate(value, bits);

    }

    private class AccumulatedField {
        int mesgNum;
        int destFieldNum; //Field# to accumulate into
        long lastValue;
        long accumulatedValue;

        AccumulatedField(int mesgNum, int destFieldNum) {
            this.mesgNum = mesgNum;
            this.destFieldNum = destFieldNum;
            this.lastValue = 0;
            this.accumulatedValue = 0;
        }

        public long accumulate(long value, int bits) {
            long mask = ((long) 1 << bits) - 1;

            accumulatedValue += (value - lastValue) & mask;
            lastValue = value;

            return accumulatedValue;
        }

        public long set(long value) {
            accumulatedValue = value;
            this.lastValue = value;
            return accumulatedValue;
        }
    }
}
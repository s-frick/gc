/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class BandedExercisesExerciseName  {
    public static final int AB_TWIST = 1;
    public static final int BACK_EXTENSION = 2;
    public static final int BICYCLE_CRUNCH = 3;
    public static final int CALF_RAISES = 4;
    public static final int CHEST_PRESS = 5;
    public static final int CLAM_SHELLS = 6;
    public static final int CURL = 7;
    public static final int DEADBUG = 8;
    public static final int DEADLIFT = 9;
    public static final int DONKEY_KICK = 10;
    public static final int EXTERNAL_ROTATION = 11;
    public static final int EXTERNAL_ROTATION_AT_90_DEGREE_ABDUCTION = 12;
    public static final int FACE_PULL = 13;
    public static final int FIRE_HYDRANT = 14;
    public static final int FLY = 15;
    public static final int FRONT_RAISE = 16;
    public static final int GLUTE_BRIDGE = 17;
    public static final int HAMSTRING_CURLS = 18;
    public static final int HIGH_PLANK_LEG_LIFTS = 19;
    public static final int HIP_EXTENSION = 20;
    public static final int INTERNAL_ROTATION = 21;
    public static final int JUMPING_JACK = 22;
    public static final int KNEELING_CRUNCH = 23;
    public static final int LATERAL_BAND_WALKS = 24;
    public static final int LATERAL_RAISE = 25;
    public static final int LATPULL = 26;
    public static final int LEG_ABDUCTION = 27;
    public static final int LEG_ADDUCTION = 28;
    public static final int LEG_EXTENSION = 29;
    public static final int LUNGE = 30;
    public static final int PLANK = 31;
    public static final int PULL_APART = 32;
    public static final int PUSH_UPS = 33;
    public static final int REVERSE_CRUNCH = 34;
    public static final int ROW = 35;
    public static final int SHOULDER_ABDUCTION = 36;
    public static final int SHOULDER_EXTENSION = 37;
    public static final int SHOULDER_EXTERNAL_ROTATION = 38;
    public static final int SHOULDER_FLEXION_TO_90_DEGREES = 39;
    public static final int SIDE_PLANK_LEG_LIFTS = 40;
    public static final int SIDE_RAISE = 41;
    public static final int SQUAT = 42;
    public static final int SQUAT_TO_PRESS = 43;
    public static final int TRICEP_EXTENSION = 44;
    public static final int TRICEP_KICKBACK = 45;
    public static final int UPRIGHT_ROW = 46;
    public static final int WALL_CRAWL_WITH_EXTERNAL_ROTATION = 47;
    public static final int LATERAL_RAISE_WHEELCHAIR = 49;
    public static final int TRICEPS_EXTENSION_WHEELCHAIR = 50;
    public static final int CHEST_FLY_INCLINE_WHEELCHAIR = 51;
    public static final int CHEST_FLY_DECLINE_WHEELCHAIR = 52;
    public static final int PULL_DOWN_WHEELCHAIR = 53;
    public static final int STRAIGHT_ARM_PULL_DOWN_WHEELCHAIR = 54;
    public static final int CURL_WHEELCHAIR = 55;
    public static final int OVERHEAD_CURL_WHEELCHAIR = 56;
    public static final int FACE_PULL_WHEELCHAIR = 57;
    public static final int AROUND_THE_WORLD_WHEELCHAIR = 58;
    public static final int PULL_APART_WHEELCHAIR = 59;
    public static final int SIDE_CURL_WHEELCHAIR = 60;
    public static final int OVERHEAD_PRESS_WHEELCHAIR = 61;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(AB_TWIST, "AB_TWIST");
        stringMap.put(BACK_EXTENSION, "BACK_EXTENSION");
        stringMap.put(BICYCLE_CRUNCH, "BICYCLE_CRUNCH");
        stringMap.put(CALF_RAISES, "CALF_RAISES");
        stringMap.put(CHEST_PRESS, "CHEST_PRESS");
        stringMap.put(CLAM_SHELLS, "CLAM_SHELLS");
        stringMap.put(CURL, "CURL");
        stringMap.put(DEADBUG, "DEADBUG");
        stringMap.put(DEADLIFT, "DEADLIFT");
        stringMap.put(DONKEY_KICK, "DONKEY_KICK");
        stringMap.put(EXTERNAL_ROTATION, "EXTERNAL_ROTATION");
        stringMap.put(EXTERNAL_ROTATION_AT_90_DEGREE_ABDUCTION, "EXTERNAL_ROTATION_AT_90_DEGREE_ABDUCTION");
        stringMap.put(FACE_PULL, "FACE_PULL");
        stringMap.put(FIRE_HYDRANT, "FIRE_HYDRANT");
        stringMap.put(FLY, "FLY");
        stringMap.put(FRONT_RAISE, "FRONT_RAISE");
        stringMap.put(GLUTE_BRIDGE, "GLUTE_BRIDGE");
        stringMap.put(HAMSTRING_CURLS, "HAMSTRING_CURLS");
        stringMap.put(HIGH_PLANK_LEG_LIFTS, "HIGH_PLANK_LEG_LIFTS");
        stringMap.put(HIP_EXTENSION, "HIP_EXTENSION");
        stringMap.put(INTERNAL_ROTATION, "INTERNAL_ROTATION");
        stringMap.put(JUMPING_JACK, "JUMPING_JACK");
        stringMap.put(KNEELING_CRUNCH, "KNEELING_CRUNCH");
        stringMap.put(LATERAL_BAND_WALKS, "LATERAL_BAND_WALKS");
        stringMap.put(LATERAL_RAISE, "LATERAL_RAISE");
        stringMap.put(LATPULL, "LATPULL");
        stringMap.put(LEG_ABDUCTION, "LEG_ABDUCTION");
        stringMap.put(LEG_ADDUCTION, "LEG_ADDUCTION");
        stringMap.put(LEG_EXTENSION, "LEG_EXTENSION");
        stringMap.put(LUNGE, "LUNGE");
        stringMap.put(PLANK, "PLANK");
        stringMap.put(PULL_APART, "PULL_APART");
        stringMap.put(PUSH_UPS, "PUSH_UPS");
        stringMap.put(REVERSE_CRUNCH, "REVERSE_CRUNCH");
        stringMap.put(ROW, "ROW");
        stringMap.put(SHOULDER_ABDUCTION, "SHOULDER_ABDUCTION");
        stringMap.put(SHOULDER_EXTENSION, "SHOULDER_EXTENSION");
        stringMap.put(SHOULDER_EXTERNAL_ROTATION, "SHOULDER_EXTERNAL_ROTATION");
        stringMap.put(SHOULDER_FLEXION_TO_90_DEGREES, "SHOULDER_FLEXION_TO_90_DEGREES");
        stringMap.put(SIDE_PLANK_LEG_LIFTS, "SIDE_PLANK_LEG_LIFTS");
        stringMap.put(SIDE_RAISE, "SIDE_RAISE");
        stringMap.put(SQUAT, "SQUAT");
        stringMap.put(SQUAT_TO_PRESS, "SQUAT_TO_PRESS");
        stringMap.put(TRICEP_EXTENSION, "TRICEP_EXTENSION");
        stringMap.put(TRICEP_KICKBACK, "TRICEP_KICKBACK");
        stringMap.put(UPRIGHT_ROW, "UPRIGHT_ROW");
        stringMap.put(WALL_CRAWL_WITH_EXTERNAL_ROTATION, "WALL_CRAWL_WITH_EXTERNAL_ROTATION");
        stringMap.put(LATERAL_RAISE_WHEELCHAIR, "LATERAL_RAISE_WHEELCHAIR");
        stringMap.put(TRICEPS_EXTENSION_WHEELCHAIR, "TRICEPS_EXTENSION_WHEELCHAIR");
        stringMap.put(CHEST_FLY_INCLINE_WHEELCHAIR, "CHEST_FLY_INCLINE_WHEELCHAIR");
        stringMap.put(CHEST_FLY_DECLINE_WHEELCHAIR, "CHEST_FLY_DECLINE_WHEELCHAIR");
        stringMap.put(PULL_DOWN_WHEELCHAIR, "PULL_DOWN_WHEELCHAIR");
        stringMap.put(STRAIGHT_ARM_PULL_DOWN_WHEELCHAIR, "STRAIGHT_ARM_PULL_DOWN_WHEELCHAIR");
        stringMap.put(CURL_WHEELCHAIR, "CURL_WHEELCHAIR");
        stringMap.put(OVERHEAD_CURL_WHEELCHAIR, "OVERHEAD_CURL_WHEELCHAIR");
        stringMap.put(FACE_PULL_WHEELCHAIR, "FACE_PULL_WHEELCHAIR");
        stringMap.put(AROUND_THE_WORLD_WHEELCHAIR, "AROUND_THE_WORLD_WHEELCHAIR");
        stringMap.put(PULL_APART_WHEELCHAIR, "PULL_APART_WHEELCHAIR");
        stringMap.put(SIDE_CURL_WHEELCHAIR, "SIDE_CURL_WHEELCHAIR");
        stringMap.put(OVERHEAD_PRESS_WHEELCHAIR, "OVERHEAD_PRESS_WHEELCHAIR");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}
